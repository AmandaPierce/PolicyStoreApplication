<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PolicyStoreApplication</name>
    </assembly>
    <members>
        <member name="M:PolicyStoreApplication.Controllers.PolicyController.CreatePolicyAsync(PolicyStoreApplication.Dtos.UpsertPolicyDto,System.Threading.CancellationToken)">
             <summary>
             Creates a policy.
             </summary>
             <param name="dto"></param>
             <param name="cancellationToken"></param>
             <returns>A newly created PolicyObject</returns>
             <remarks>
             Sample request:
            
                 POST /policy
                 {
                    "policyName": "Code of Conduct",
                    "policyObjective": "Our Employee Code of Conduct company policy outlines our expectations regarding employees’ behaviour towards their colleagues, supervisors and overall organization. ",
                    "policyType": 1,
                    "targetType": 31,
                    "conditions": {
                         "Compliance with law": "All employees must protect our company’s legality. They should comply with all environmental, safety and fair dealing laws. We expect employees to be ethical and responsible when dealing with our company’s finances, products, partnerships and public image.",
                         "Respect in the workplace": "All employees should respect their colleagues"
                    }
                 }
            
             </remarks>
             <response code="200">Returns the newly created Policy object</response>
             <response code="500">If an unhandled exception is thrown an internal error is returned</response>
        </member>
        <member name="M:PolicyStoreApplication.Controllers.PolicyController.DeletePolicyAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Deletes a policy.
             </summary>
             <param name="policyId"></param>
             <param name="cancellationToken"></param>
             <remarks>
             Sample request:
            
                 Delete /policy/{id}
            
             </remarks>
             <returns>A successful ActionResult</returns>
             <response code="200">Returns OkResult object</response>
             <response code="500">If an unhandled exception is thrown an internal error is returned</response>
        </member>
        <member name="M:PolicyStoreApplication.Controllers.PolicyController.GetPolicyAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Gets a policy.
             </summary>
             <param name="policyId"></param>
             <param name="cancellationToken"></param>
             Sample request:
            
                 Get /policy/{id}
            
             <returns>The policy matching the id passed in as a parameter</returns>
             <response code="200">Returns a Policy object</response>
             <response code="500">If an unhandled exception is thrown an internal error is returned</response>
        </member>
        <member name="M:PolicyStoreApplication.Controllers.PolicyController.GetPoliciesAsync(System.Threading.CancellationToken)">
             <summary>
             Gets a list of all policies.
             </summary>
             <param name="cancellationToken"></param>
             Sample request:
            
                 Get /policy
            
             <returns>All company policies</returns>
             <response code="200">Returns a list of Policy objects</response>
             <response code="500">If an unhandled exception is thrown an internal error is returned</response>
        </member>
        <member name="M:PolicyStoreApplication.Controllers.PolicyController.UpdatePolicyAsync(System.String,PolicyStoreApplication.Dtos.UpsertPolicyDto,System.Threading.CancellationToken)">
             <summary>
             Updates a policy.
             </summary>
             <param name="policyId"></param>
             <param name="dto"></param>
             <param name="cancellationToken"></param>
             <returns>A newly updated PolicyObject</returns>
             <remarks>
             Sample request:
            
                 Put /policy
                 {
                    "policyName": "Code of Conduct",
                    "policyObjective": "Our Employee Code of Conduct company policy outlines our expectations regarding employees’ behaviour towards their colleagues, supervisors and overall organization. ",
                    "policyType": 1,
                    "targetType": 31,
                    "conditions": {
                         "Compliance with law": "All employees must protect our company’s legality. They should comply with all environmental, safety and fair dealing laws. We expect employees to be ethical and responsible when dealing with our company’s finances, products, partnerships and public image.",
                         "Respect in the workplace": "All employees should respect their colleagues"
                    }
                 }
            
             </remarks>
             <response code="200">Returns the newly updated Policy object</response>
             <response code="500">If an unhandled exception is thrown an internal error is returned</response>
        </member>
        <member name="M:PolicyStoreApplication.Factories.MongoDbCollection`1.#ctor(MongoDB.Driver.MongoClient,System.String,System.String)">
            <summary>
                Gets the specified collection from the database. 
            </summary>
        </member>
        <member name="M:PolicyStoreApplication.Factories.MongoDbCollectionFactory.GetCollection``1(System.String)">
            <summary>
                Retrieves a mongo db collection from the database. 
            </summary>
        </member>
        <member name="M:PolicyStoreApplication.ServiceCollectionExtensions.AddAndConfigureApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds and configures the api version. 
            </summary>
        </member>
        <member name="M:PolicyStoreApplication.ServiceCollectionExtensions.AddAndConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds and configures the swagger. 
            </summary>
        </member>
        <member name="M:PolicyStoreApplication.ServiceCollectionExtensions.AddAndConfigureDatabaseFactoryAndSettings(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
                Adds and configures the database factory. 
            </summary>
        </member>
    </members>
</doc>
